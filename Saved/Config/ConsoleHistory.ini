[ConsoleHistory]
History=stat fps
History=exec(open("C:\Users\Rahul\Downloads\unreal_graph_manual_links.py").read())
History=unreal.execute_python_command('import sys; sys.path.append("C:/Users/Rahul/Downloads"); import unreal_graph_manual_links')

[ConsoleHistoryPython]
History=py C:\Users\Rahul\Downloads\unreal_graph_manual_links.py
History="import unreal\r\nimport os\r\nimport json\r\n\r\nasset_registry = unreal.AssetRegistryHelpers.get_asset_registry()\r\n\r\ndef get_all_assets_by_class(class_names):\r\n    all_assets = {}\r\n    for class_name in class_names:\r\n        assets = asset_registry.get_assets_by_class(class_name, True)\r\n        for asset in assets:\r\n            asset_data = {\r\n                \"name\": asset.asset_name,\r\n                \"path\": asset.object_path,\r\n                \"class\": asset.asset_class,\r\n                \"package\": asset.package_name\r\n            }\r\n            if class_name not in all_assets:\r\n                all_assets[class_name] = []\r\n            all_assets[class_name].append(asset_data)\r\n    return all_assets\r\n\r\ndef get_blueprint_info(asset_data):\r\n    blueprint = unreal.load_object(None, asset_data[\"path\"])\r\n    if not blueprint:\r\n        return None\r\n\r\n    try:\r\n        generated_class = blueprint.generated_class\r\n        parent_class = generated_class.get_super_class().get_name() if generated_class else \"None\"\r\n        referenced_assets = unreal.EditorAssetLibrary.find_package_referencers_for_asset(asset_data[\"path\"], True)\r\n    except Exception as e:\r\n        parent_class = \"Unknown\"\r\n        referenced_assets = []\r\n\r\n    return {\r\n        \"name\": asset_data[\"name\"],\r\n        \"class\": asset_data[\"class\"],\r\n        \"path\": asset_data[\"path\"],\r\n        \"parent_class\": parent_class,\r\n        \"referenced_assets\": referenced_assets\r\n    }\r\n\r\ndef run_extraction(output_path):\r\n    blueprint_classes = [\"Blueprint\", \"AnimBlueprint\", \"WidgetBlueprint\", \"DataAsset\", \"CurveTable\", \"BehaviorTree\", \"BlackboardData\"]\r\n    all_data = {}\r\n\r\n    print(\"Collecting assets...\")\r\n    all_assets = get_all_assets_by_class(blueprint_classes)\r\n\r\n    print(\"Parsing Blueprint dependencies...\")\r\n    for class_name, assets in all_assets.items():\r\n        all_data[class_name] = []\r\n        for asset in assets:\r\n            info = get_blueprint_info(asset)\r\n            if info:\r\n                all_data[class_name].append(info)\r\n\r\n    json_file = os.path.join(output_path, \"unreal_dependency_report.json\")\r\n    with open(json_file, \"w\") as f:\r\n        json.dump(all_data, f, indent=4)\r\n    print(f\"âœ… Report saved to: {json_file}\")\r\n\r\n# Set your desired output path here (outside of Unreal project to avoid saving inside Content)\r\nrun_extraction(\"C:/UnrealReports/Aura\")"
History=python
History=py
History="\"C:\\Users\\Rahul\\Downloads\\unreal_graph_manual_links.py\""
History=py "C:\Users\Rahul\Downloads\unreal_graph_manual_links.py"

